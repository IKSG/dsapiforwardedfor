/* automatically generated by rust-bindgen 0.56.0 */
#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]

pub const NATURAL_ALIGNMENT: u32 = 8;
pub const MEMALLOC_ALIGNMENT: u32 = 8;
pub const PLATFORM_NAME: &'static [u8; 9usize] = b"Linux/64\0";
pub const COMPILER_INT_SIZE: u32 = 4;
pub const REQUIRED_ALIGNMENT: u32 = 8;
pub const COMPILER_DWORD_ALIGNMENT: u32 = 4;
pub const COMPILER_NUMBER_ALIGNMENT: u32 = 4;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 28;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const FALSE: u32 = 0;
pub const NULL: u32 = 0;
pub const NULLHANDLE: u32 = 0;
pub const BITS_PER_BYTE: u32 = 8;
pub const __GNUC_VA_LIST: u32 = 1;
pub const NOERROR: u32 = 0;
pub const PKG_MAIN: u32 = 0;
pub const PKG_CCONSOLE: u32 = 64;
pub const PKG_MAILMISC3: u32 = 96;
pub const PKG_MINDER: u32 = 128;
pub const PKG_SERVER3: u32 = 224;
pub const PKG_OS: u32 = 256;
pub const PKG_NSF: u32 = 512;
pub const PKG_NIF: u32 = 768;
pub const PKG_NSF2: u32 = 896;
pub const PKG_MISC: u32 = 1024;
pub const PKG_SERVER2: u32 = 1216;
pub const PKG_THUNK: u32 = 1264;
pub const PKG_FORMULA: u32 = 1280;
pub const PKG_NSF8: u32 = 1408;
pub const PKG_ODS: u32 = 1536;
pub const PKG_LSXUI4: u32 = 1584;
pub const PKG_AGENTS2: u32 = 1632;
pub const PKG_SCHUI: u32 = 1664;
pub const PKG_BERT: u32 = 1696;
pub const PKG_PLUGINS: u32 = 1728;
pub const PKG_IMAIL: u32 = 1744;
pub const PKG_PKIX: u32 = 1792;
pub const PKG_GT: u32 = 1888;
pub const PKG_NIF2: u32 = 1920;
pub const PKG_DIR: u32 = 2008;
pub const PKG_CLIENT: u32 = 2048;
pub const PKG_LSXUI3: u32 = 2096;
pub const PKG_APC: u32 = 2112;
pub const PKG_DBMISC2: u32 = 2144;
pub const PKG_TASK_LOADER: u32 = 2160;
pub const PKG_MAILMISC4: u32 = 2176;
pub const PKG_SERVER: u32 = 2304;
pub const PKG_NETWORK: u32 = 2560;
pub const PKG_WMISC_ERR: u32 = 2816;
pub const PKG_XPM_ERR: u32 = 2880;
pub const PKG_ACTION: u32 = 2944;
pub const PKG_ACTIONPANE: u32 = 3008;
pub const PKG_EDIT_ERR: u32 = 3072;
pub const PKG_VIEW_ERR: u32 = 3328;
pub const PKG_MAIL: u32 = 3584;
pub const PKG_BSAFE3: u32 = 3648;
pub const PKG_BSAFE4: u32 = 3680;
pub const PKG_CONV: u32 = 3712;
pub const PKG_NSF4: u32 = 3744;
pub const PKG_FRAMDES: u32 = 3776;
pub const PKG_NETWORK3: u32 = 3808;
pub const PKG_FT: u32 = 3840;
pub const PKG_BSAFE5: u32 = 3904;
pub const PKG_DBMISC: u32 = 3920;
pub const PKG_NETWORK2: u32 = 3968;
pub const PKG_DEBUG: u32 = 4096;
pub const PKG_SSL: u32 = 4160;
pub const PKG_SERVER4: u32 = 4176;
pub const PKG_BOOKMARK: u32 = 4192;
pub const PKG_NSF5: u32 = 4208;
pub const PKG_NEM_ERR: u32 = 4224;
pub const PKG_ROUTER: u32 = 4352;
pub const PKG_MAILMAN: u32 = 4432;
pub const PKG_ROUTER2: u32 = 4464;
pub const PKG_LSBE: u32 = 4528;
pub const PKG_LSDO: u32 = 4576;
pub const PKG_LSXDB2: u32 = 4592;
pub const PKG_REG2: u32 = 4608;
pub const PKG_LSIDE: u32 = 4736;
pub const PKG_HTML: u32 = 4816;
pub const PKG_SERVER5: u32 = 4848;
pub const PKG_LOG: u32 = 4864;
pub const PKG_NSF3: u32 = 4992;
pub const PKG_XPC: u32 = 5120;
pub const PKG_EVENT: u32 = 5376;
pub const PKG_FIDE: u32 = 5424;
pub const PKG_NETWORK4: u32 = 5456;
pub const PKG_MAILMISC2: u32 = 5472;
pub const PKG_BCASE: u32 = 5504;
pub const PKG_SECURE2: u32 = 5600;
pub const PKG_BSAFE6: u32 = 5616;
pub const PKG_REPL: u32 = 5632;
pub const PKG_ADMIN_ERR2: u32 = 5832;
pub const PKG_BSAFE: u32 = 5888;
pub const PKG_SERVER7: u32 = 6040;
pub const PKG_DESK_ERR: u32 = 6144;
pub const PKG_SECURE: u32 = 6400;
pub const PKG_AGENT: u32 = 6656;
pub const PKG_CCONSOLE2: u32 = 6736;
pub const PKG_PLAT_STAT_ERR: u32 = 6752;
pub const PKG_AGENT1: u32 = 6768;
pub const PKG_AGENTS3: u32 = 6784;
pub const PKG_AGENT2: u32 = 6832;
pub const PKG_XML: u32 = 6912;
pub const PKG_DAOS2: u32 = 7147;
pub const PKG_DAOS: u32 = 7152;
pub const PKG_NETDRV: u32 = 7168;
pub const PKG_IMPORT: u32 = 7424;
pub const PKG_EXPORT: u32 = 7680;
pub const PKG_LSXUI2: u32 = 7936;
pub const PKG_REG: u32 = 8192;
pub const PKG_NATIVE_FIRST: u32 = 8448;
pub const PKG_NATIVE_LAST: u32 = 10495;
pub const PKG_NSE: u32 = 10496;
pub const PKG_NSF6: u32 = 10672;
pub const PKG_PERFSTAT: u32 = 10688;
pub const PKG_MISC2: u32 = 10720;
pub const PKG_NETDRVLCL: u32 = 10752;
pub const PKG_NTI: u32 = 11008;
pub const PKG_VIEWMAP: u32 = 11264;
pub const PKG_BSAFE2: u32 = 11504;
pub const PKG_REPL2: u32 = 11520;
pub const PKG_RDBGERR: u32 = 11648;
pub const PKG_NSF10: u32 = 11712;
pub const PKG_AGENTS: u32 = 11776;
pub const PKG_DESK_ERR2: u32 = 11904;
pub const PKG_LSCRIPT: u32 = 12032;
pub const PKG_LSXUI: u32 = 12160;
pub const PKG_DSGN: u32 = 12288;
pub const PKG_SERVER6: u32 = 12352;
pub const PKG_ADMIN_ERR: u32 = 12416;
pub const PKG_DBD: u32 = 12544;
pub const PKG_COMPILER7: u32 = 12728;
pub const PKG_NEWS: u32 = 12744;
pub const PKG_IMAIL_EXT: u32 = 12760;
pub const PKG_DAEMON: u32 = 12784;
pub const PKG_COMPILER8: u32 = 12800;
pub const PKG_ADDIN: u32 = 13056;
pub const PKG_EDIT_ERR2: u32 = 13312;
pub const PKG_LSCRIPT2: u32 = 13568;
pub const PKG_ADMIN_ERR3: u32 = 13696;
pub const PKG_DSGN2: u32 = 13760;
pub const PKG_GRMISC: u32 = 13824;
pub const PKG_VIMSMI: u32 = 13856;
pub const PKG_WEB: u32 = 13888;
pub const PKG_ADDIN2: u32 = 14080;
pub const PKG_NSF9: u32 = 14336;
pub const PKG_DESK_ERR4: u32 = 14592;
pub const PKG_ORB: u32 = 14720;
pub const PKG_LSXUI5: u32 = 14784;
pub const PKG_HTTP: u32 = 14848;
pub const PKG_POP3: u32 = 15048;
pub const PKG_MAILMISC: u32 = 15068;
pub const PKG_SMTP: u32 = 15072;
pub const PKG_POP3C: u32 = 15080;
pub const PKG_SMTPC: u32 = 15083;
pub const PKG_MAILMISC1: u32 = 15090;
pub const PKG_DB2NSF: u32 = 15104;
pub const PKG_DIREX: u32 = 15328;
pub const PKG_SMARTI: u32 = 15360;
pub const PKG_TOOLBAR: u32 = 15360;
pub const PKG_SMTPC2: u32 = 15488;
pub const PKG_DESK_ERR5: u32 = 15504;
pub const PKG_OLE_ERR: u32 = 15616;
pub const PKG_MISC3: u32 = 15680;
pub const PKG_NSF7: u32 = 15712;
pub const PKG_NETWORK5: u32 = 15744;
pub const PKG_DESK_ERR3: u32 = 15776;
pub const PKG_EVENT2: u32 = 15840;
pub const PKG_JAVAWRAP: u32 = 15872;
pub const PKG_ASSISTANT_ERR: u32 = 15936;
pub const PKG_JSWRAP: u32 = 16000;
pub const PKG_PRINT_ERR: u32 = 16064;
pub const PKG_EDIT_ERR3: u32 = 16128;
pub const PKG_CODES: u32 = 255;
pub const NETPKG_TCP: u32 = 0;
pub const NETPKG_ATALK: u32 = 20;
pub const NETPKG_NWSPX: u32 = 55;
pub const IMPKG_IFL: u32 = 0;
pub const IMPKG_IPCX: u32 = 50;
pub const IMPKG_IPIC: u32 = 60;
pub const IMPKG_IRTF: u32 = 70;
pub const IMPKG_ISTF: u32 = 80;
pub const IMPKG_ISTR: u32 = 90;
pub const IMPKG_ITAB: u32 = 100;
pub const IMPKG_ICSV: u32 = 130;
pub const IMPKG_ITEXT: u32 = 135;
pub const IMPKG_ITIFF: u32 = 145;
pub const IMPKG_IWKSE: u32 = 160;
pub const IMPKG_IWKSV: u32 = 180;
pub const IMPKG_ALL: u32 = 212;
pub const IMPKG_IBMP: u32 = 230;
pub const IMPKG_IGIF: u32 = 235;
pub const IMPKG_IW4W: u32 = 240;
pub const IMPKG_ISTRNGS: u32 = 250;
pub const IMPKG_IJPEG: u32 = 252;
pub const EXPKG_XCGM: u32 = 0;
pub const EXPKG_XRTF: u32 = 10;
pub const EXPKG_XSTF: u32 = 20;
pub const EXPKG_XSTR: u32 = 65;
pub const EXPKG_XTAB: u32 = 90;
pub const EXPKG_XTEXT: u32 = 100;
pub const EXPKG_XTIFF: u32 = 110;
pub const EXPKG_XWKS: u32 = 120;
pub const EXPKG_ALL: u32 = 130;
pub const EXPKG_XW4W: u32 = 150;
pub const EXPKG_XVCRD: u32 = 170;
pub const EXPKG_XVCRD3: u32 = 180;
pub const EXPKG_XCSV: u32 = 200;
pub const EXPKG_XICAL: u32 = 220;
pub const ERR_MASK: u32 = 16383;
pub const PKG_MASK: u32 = 16128;
pub const ERRNUM_MASK: u32 = 255;
pub const STRING_MASK: u32 = 32768;
pub const MAX_CONSOLE_CMD_LEN: u32 = 256;
pub const kInterfaceVersion: u32 = 2;
pub const kMaxFilterDesc: u32 = 255;
pub const kFilterTranslateRequest: u32 = 16;
pub const DSAPI_ERROR_MESSAGES: u32 = 1000;
pub const DSAPI_BUFFER_TOO_SMALL: u32 = 1001;
pub const DSAPI_INVALID_ARGUMENT: u32 = 1002;
pub const DSAPI_MEMORY_ERROR: u32 = 1003;
pub const DSAPI_INTERNAL_ERROR: u32 = 1004;
pub const DSAPI_REQUEST_ALREADY_OWNED: u32 = 1005;
pub const MAX_ENVAPI_BUF_SIZE: u32 = 32767;
pub const MAXENVVALUE: u32 = 256;
pub const OS_PREFIX: &'static [u8; 4usize] = b"WIN\0";
pub const NATIVE: &'static [u8; 7usize] = b"Native\0";
pub const TEMP_DIR_PREFIX: &'static [u8; 6usize] = b"notes\0";
pub const TEMP_DIR_SUFFIX_LEN: u32 = 6;
pub const TEMP_DIR_SUFFIX_FORMATSPEC: &'static [u8; 5usize] = b"%06x\0";
pub const TEMP_DIR_DEFAULT_SUFFIX: &'static [u8; 7usize] = b"G00000\0";
pub const TEMP_DIR_SUFFIX_MAX_VALUE: u32 = 16777215;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
	pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
	assert_eq!(
		::std::mem::size_of::<__fsid_t>(),
		8usize,
		concat!("Size of: ", stringify!(__fsid_t))
	);
	assert_eq!(
		::std::mem::align_of::<__fsid_t>(),
		4usize,
		concat!("Alignment of ", stringify!(__fsid_t))
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(__fsid_t),
			"::",
			stringify!(__val)
		)
	);
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
	pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
	pub __bindgen_padding_0: u64,
	pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
	assert_eq!(
		::std::mem::size_of::<max_align_t>(),
		32usize,
		concat!("Size of: ", stringify!(max_align_t))
	);
	assert_eq!(
		::std::mem::align_of::<max_align_t>(),
		16usize,
		concat!("Alignment of ", stringify!(max_align_t))
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
		},
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(max_align_t),
			"::",
			stringify!(__clang_max_align_nonce1)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
		},
		16usize,
		concat!(
			"Offset of field: ",
			stringify!(max_align_t),
			"::",
			stringify!(__clang_max_align_nonce2)
		)
	);
}
pub type BYTE = ::std::os::raw::c_uchar;
pub type LONG = ::std::os::raw::c_int;
pub type BOOL = ::std::os::raw::c_int;
pub type USHORT = ::std::os::raw::c_ushort;
pub type ULONG = ::std::os::raw::c_uint;
pub type UCHAR = ::std::os::raw::c_uchar;
pub type UINT = ::std::os::raw::c_uint;
pub type DHANDLE = ::std::os::raw::c_uint;
pub type HANDLE = ::std::os::raw::c_uint;
pub type PHANDLE = *mut ::std::os::raw::c_uint;
pub type WHANDLE = HANDLE;
pub type PWHANDLE = *mut HANDLE;
pub type WORD = ::std::os::raw::c_ushort;
pub type DWORD = ::std::os::raw::c_uint;
pub type PTRP_UINT = u64;
pub type PTRP_ULONG = u64;
pub type PTRP_DWORD = u64;
pub type PTRP_INT = i64;
pub type PTRP_LONG = i64;
pub type MEMHANDLE = DWORD;
pub type STATUS = WORD;
pub type FONTID = DWORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RECTSIZE {
	pub width: WORD,
	pub height: WORD,
}
#[test]
fn bindgen_test_layout_RECTSIZE() {
	assert_eq!(
		::std::mem::size_of::<RECTSIZE>(),
		4usize,
		concat!("Size of: ", stringify!(RECTSIZE))
	);
	assert_eq!(
		::std::mem::align_of::<RECTSIZE>(),
		2usize,
		concat!("Alignment of ", stringify!(RECTSIZE))
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<RECTSIZE>())).width as *const _ as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(RECTSIZE),
			"::",
			stringify!(width)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<RECTSIZE>())).height as *const _ as usize },
		2usize,
		concat!(
			"Offset of field: ",
			stringify!(RECTSIZE),
			"::",
			stringify!(height)
		)
	);
}
pub type NDSIZE_T = ::std::os::raw::c_ulong;
pub type NDSIZE_T64 = ::std::os::raw::c_ulong;
pub type DWORD64 = ::std::os::raw::c_ulong;
pub type LONG64 = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LIST {
	pub ListEntries: USHORT,
}
#[test]
fn bindgen_test_layout_LIST() {
	assert_eq!(
		::std::mem::size_of::<LIST>(),
		2usize,
		concat!("Size of: ", stringify!(LIST))
	);
	assert_eq!(
		::std::mem::align_of::<LIST>(),
		2usize,
		concat!("Alignment of ", stringify!(LIST))
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<LIST>())).ListEntries as *const _ as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(LIST),
			"::",
			stringify!(ListEntries)
		)
	);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RANGE {
	pub ListEntries: USHORT,
	pub RangeEntries: USHORT,
}
#[test]
fn bindgen_test_layout_RANGE() {
	assert_eq!(
		::std::mem::size_of::<RANGE>(),
		4usize,
		concat!("Size of: ", stringify!(RANGE))
	);
	assert_eq!(
		::std::mem::align_of::<RANGE>(),
		2usize,
		concat!("Alignment of ", stringify!(RANGE))
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<RANGE>())).ListEntries as *const _ as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(RANGE),
			"::",
			stringify!(ListEntries)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<RANGE>())).RangeEntries as *const _ as usize },
		2usize,
		concat!(
			"Offset of field: ",
			stringify!(RANGE),
			"::",
			stringify!(RangeEntries)
		)
	);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagTIMEDATE {
	pub Innards: [DWORD; 2usize],
}
#[test]
fn bindgen_test_layout_tagTIMEDATE() {
	assert_eq!(
		::std::mem::size_of::<tagTIMEDATE>(),
		8usize,
		concat!("Size of: ", stringify!(tagTIMEDATE))
	);
	assert_eq!(
		::std::mem::align_of::<tagTIMEDATE>(),
		4usize,
		concat!("Alignment of ", stringify!(tagTIMEDATE))
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<tagTIMEDATE>())).Innards as *const _ as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(tagTIMEDATE),
			"::",
			stringify!(Innards)
		)
	);
}
pub type TIMEDATE = tagTIMEDATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIMEDATE_PAIR {
	pub Lower: TIMEDATE,
	pub Upper: TIMEDATE,
}
#[test]
fn bindgen_test_layout_TIMEDATE_PAIR() {
	assert_eq!(
		::std::mem::size_of::<TIMEDATE_PAIR>(),
		16usize,
		concat!("Size of: ", stringify!(TIMEDATE_PAIR))
	);
	assert_eq!(
		::std::mem::align_of::<TIMEDATE_PAIR>(),
		4usize,
		concat!("Alignment of ", stringify!(TIMEDATE_PAIR))
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<TIMEDATE_PAIR>())).Lower as *const _ as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(TIMEDATE_PAIR),
			"::",
			stringify!(Lower)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<TIMEDATE_PAIR>())).Upper as *const _ as usize },
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(TIMEDATE_PAIR),
			"::",
			stringify!(Upper)
		)
	);
}
pub type QWORD = ::std::os::raw::c_ulong;
pub type NUMBER = f64;
pub type ALIGNED_NUMBER = NUMBER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NUMBER_PAIR {
	pub Lower: NUMBER,
	pub Upper: NUMBER,
}
#[test]
fn bindgen_test_layout_NUMBER_PAIR() {
	assert_eq!(
		::std::mem::size_of::<NUMBER_PAIR>(),
		16usize,
		concat!("Size of: ", stringify!(NUMBER_PAIR))
	);
	assert_eq!(
		::std::mem::align_of::<NUMBER_PAIR>(),
		8usize,
		concat!("Alignment of ", stringify!(NUMBER_PAIR))
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<NUMBER_PAIR>())).Lower as *const _ as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(NUMBER_PAIR),
			"::",
			stringify!(Lower)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<NUMBER_PAIR>())).Upper as *const _ as usize },
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(NUMBER_PAIR),
			"::",
			stringify!(Upper)
		)
	);
}
pub type ALIGNED_NUMBER_PAIR = NUMBER_PAIR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LICENSEID {
	pub ID: [BYTE; 5usize],
	pub Product: BYTE,
	pub Check: [BYTE; 2usize],
}
#[test]
fn bindgen_test_layout_LICENSEID() {
	assert_eq!(
		::std::mem::size_of::<LICENSEID>(),
		8usize,
		concat!("Size of: ", stringify!(LICENSEID))
	);
	assert_eq!(
		::std::mem::align_of::<LICENSEID>(),
		1usize,
		concat!("Alignment of ", stringify!(LICENSEID))
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<LICENSEID>())).ID as *const _ as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(LICENSEID),
			"::",
			stringify!(ID)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<LICENSEID>())).Product as *const _ as usize },
		5usize,
		concat!(
			"Offset of field: ",
			stringify!(LICENSEID),
			"::",
			stringify!(Product)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<LICENSEID>())).Check as *const _ as usize },
		6usize,
		concat!(
			"Offset of field: ",
			stringify!(LICENSEID),
			"::",
			stringify!(Check)
		)
	);
}
pub type BLOCK = WORD;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type VARARG_PTR_P = va_list;
extern "C" {
	pub fn NotesMain(argc: ::std::os::raw::c_int, argv: *mut *mut ::std::os::raw::c_char)
		-> STATUS;
}
extern "C" {
	pub fn NotesInitIni(pConfigFileName: *mut ::std::os::raw::c_char) -> STATUS;
}
extern "C" {
	pub fn NotesInit() -> STATUS;
}
extern "C" {
	pub fn NotesInitExtended(
		argc: ::std::os::raw::c_int,
		argv: *mut *mut ::std::os::raw::c_char,
	) -> STATUS;
}
extern "C" {
	pub fn NotesTerm();
}
extern "C" {
	pub fn NotesInitModule(
		rethModule: *mut WHANDLE,
		rethInstance: *mut WHANDLE,
		rethPrevInstance: *mut WHANDLE,
	);
}
extern "C" {
	pub fn NotesInitThread() -> STATUS;
}
extern "C" {
	pub fn NotesTermThread();
}
extern "C" {
	pub fn AddInMain(
		hModule: WHANDLE,
		argc: ::std::os::raw::c_int,
		argv: *mut *mut ::std::os::raw::c_char,
	) -> STATUS;
}
extern "C" {
	pub fn AddInIdle() -> BOOL;
}
extern "C" {
	pub fn AddInIdleDelay(Delay: DWORD) -> BOOL;
}
extern "C" {
	pub fn AddInSecondsHaveElapsed(Seconds: DWORD) -> BOOL;
}
extern "C" {
	pub fn AddInDayHasElapsed() -> BOOL;
}
extern "C" {
	pub fn AddInShouldTerminate() -> BOOL;
}
extern "C" {
	pub fn AddInFormatErrorText(
		retString: *mut ::std::os::raw::c_char,
		String: *mut ::std::os::raw::c_char,
		...
	);
}
extern "C" {
	pub fn AddInLogErrorText(
		String: *mut ::std::os::raw::c_char,
		AdditionalErrorCode: STATUS,
		Arg: *mut ::std::os::raw::c_char,
	);
}
extern "C" {
	pub fn AddInLogMessageText(
		String: *const i8,
		AdditionalErrorCode: STATUS,
		...
	);
}
extern "C" {
	pub fn AddInSetStatusText(String: *mut ::std::os::raw::c_char, ...);
}
extern "C" {
	pub fn AddInFormatError(retString: *mut ::std::os::raw::c_char, StringID: STATUS, ...);
}
extern "C" {
	pub fn AddInLogError(
		StringID: STATUS,
		AdditionalErrorCode: STATUS,
		Arg: *mut ::std::os::raw::c_char,
	);
}
extern "C" {
	pub fn AddInLogMessage(StringID: STATUS, AdditionalErrorCode: STATUS, ...);
}
extern "C" {
	pub fn AddInSetStatus(StringID: STATUS, ...);
}
extern "C" {
	pub fn AddInQueryDefaults(rethModule: *mut WHANDLE, rethDesc: *mut DHANDLE);
}
extern "C" {
	pub fn AddInSetDefaults(hNewModule: WHANDLE, hDesc: DHANDLE);
}
extern "C" {
	pub fn AddInCreateStatusLine(TaskName: *mut ::std::os::raw::c_char) -> DHANDLE;
}
extern "C" {
	pub fn AddInDeleteStatusLine(hDesc: DHANDLE);
}
extern "C" {
	pub fn AddInSetStatusLine(hDesc: DHANDLE, String: *mut ::std::os::raw::c_char, ...);
}
pub type LMBCS = ::std::os::raw::c_uchar;
pub const FilterReturnCode_kFilterNotHandled: FilterReturnCode = 0;
pub const FilterReturnCode_kFilterHandledRequest: FilterReturnCode = 1;
pub const FilterReturnCode_kFilterHandledEvent: FilterReturnCode = 2;
pub const FilterReturnCode_kFilterError: FilterReturnCode = 3;
pub type FilterReturnCode = ::std::os::raw::c_uint;
pub const EventFlags_kFilterRawRequest: EventFlags = 1;
pub const EventFlags_kFilterParsedRequest: EventFlags = 2;
pub const EventFlags_kFilterAuthUser: EventFlags = 4;
pub const EventFlags_kFilterUserNameList: EventFlags = 8;
pub const EventFlags_kFilterMapURL: EventFlags = 16;
pub const EventFlags_kFilterResponse: EventFlags = 32;
pub const EventFlags_kFilterRawWrite: EventFlags = 64;
pub const EventFlags_kFilterEndRequest: EventFlags = 128;
pub const EventFlags_kFilterStartRequest: EventFlags = 256;
pub const EventFlags_kFilterPostTranslate: EventFlags = 512;
pub const EventFlags_kFilterAuthorized: EventFlags = 1024;
pub const EventFlags_kFilterProcessRequest: EventFlags = 2048;
pub const EventFlags_kFilterAuthenticate: EventFlags = 8192;
pub const EventFlags_kFilterRewriteURL: EventFlags = 16384;
pub const EventFlags_kFilterAny: EventFlags = 28667;
pub type EventFlags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FilterInitData {
	pub serverFilterVersion: ::std::os::raw::c_uint,
	pub appFilterVersion: ::std::os::raw::c_uint,
	pub eventFlags: ::std::os::raw::c_uint,
	pub initFlags: ::std::os::raw::c_uint,
	pub filterDesc: [u8; 256usize],
}
#[test]
fn bindgen_test_layout_FilterInitData() {
	assert_eq!(
		::std::mem::size_of::<FilterInitData>(),
		272usize,
		concat!("Size of: ", stringify!(FilterInitData))
	);
	assert_eq!(
		::std::mem::align_of::<FilterInitData>(),
		4usize,
		concat!("Alignment of ", stringify!(FilterInitData))
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterInitData>())).serverFilterVersion as *const _ as usize
		},
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterInitData),
			"::",
			stringify!(serverFilterVersion)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterInitData>())).appFilterVersion as *const _ as usize },
		4usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterInitData),
			"::",
			stringify!(appFilterVersion)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterInitData>())).eventFlags as *const _ as usize },
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterInitData),
			"::",
			stringify!(eventFlags)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterInitData>())).initFlags as *const _ as usize },
		12usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterInitData),
			"::",
			stringify!(initFlags)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterInitData>())).filterDesc as *const _ as usize },
		16usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterInitData),
			"::",
			stringify!(filterDesc)
		)
	);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FilterRequest {
	pub method: ::std::os::raw::c_uint,
	pub URL: *mut ::std::os::raw::c_char,
	pub version: *mut ::std::os::raw::c_char,
	pub userName: *mut ::std::os::raw::c_char,
	pub password: *mut ::std::os::raw::c_char,
	pub clientCert: *mut ::std::os::raw::c_uchar,
	pub clientCertLen: ::std::os::raw::c_uint,
	pub contentRead: *mut ::std::os::raw::c_char,
	pub contentReadLen: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_FilterRequest() {
	assert_eq!(
		::std::mem::size_of::<FilterRequest>(),
		72usize,
		concat!("Size of: ", stringify!(FilterRequest))
	);
	assert_eq!(
		::std::mem::align_of::<FilterRequest>(),
		8usize,
		concat!("Alignment of ", stringify!(FilterRequest))
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterRequest>())).method as *const _ as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterRequest),
			"::",
			stringify!(method)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterRequest>())).URL as *const _ as usize },
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterRequest),
			"::",
			stringify!(URL)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterRequest>())).version as *const _ as usize },
		16usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterRequest),
			"::",
			stringify!(version)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterRequest>())).userName as *const _ as usize },
		24usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterRequest),
			"::",
			stringify!(userName)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterRequest>())).password as *const _ as usize },
		32usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterRequest),
			"::",
			stringify!(password)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterRequest>())).clientCert as *const _ as usize },
		40usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterRequest),
			"::",
			stringify!(clientCert)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterRequest>())).clientCertLen as *const _ as usize },
		48usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterRequest),
			"::",
			stringify!(clientCertLen)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterRequest>())).contentRead as *const _ as usize },
		56usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterRequest),
			"::",
			stringify!(contentRead)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterRequest>())).contentReadLen as *const _ as usize },
		64usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterRequest),
			"::",
			stringify!(contentReadLen)
		)
	);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FilterContext {
	pub contextSize: ::std::os::raw::c_uint,
	pub revision: ::std::os::raw::c_uint,
	pub serverContext: *mut ::std::os::raw::c_void,
	pub serverReserved: ::std::os::raw::c_uint,
	pub securePort: ::std::os::raw::c_uint,
	pub privateContext: *mut ::std::os::raw::c_void,
	pub GetRequest: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut _FilterContext,
			pRequest: *mut FilterRequest,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub GetRequestContents: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut _FilterContext,
			pContents: *mut *mut ::std::os::raw::c_char,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub GetServerVariable: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut _FilterContext,
			pNname: *mut ::std::os::raw::c_char,
			pBuffer: *mut ::std::os::raw::c_void,
			bufferSize: ::std::os::raw::c_uint,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub WriteClient: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut _FilterContext,
			pBuffer: *mut ::std::os::raw::c_char,
			bufferLen: ::std::os::raw::c_uint,
			reserved: ::std::os::raw::c_uint,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub AllocMem: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut _FilterContext,
			size: ::std::os::raw::c_uint,
			reserved: ::std::os::raw::c_uint,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> *mut ::std::os::raw::c_void,
	>,
	pub ServerSupport: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut _FilterContext,
			funcType: ::std::os::raw::c_uint,
			pData1: *mut ::std::os::raw::c_void,
			pData2: *mut ::std::os::raw::c_void,
			other: ::std::os::raw::c_uint,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
}
#[test]
fn bindgen_test_layout__FilterContext() {
	assert_eq!(
		::std::mem::size_of::<_FilterContext>(),
		80usize,
		concat!("Size of: ", stringify!(_FilterContext))
	);
	assert_eq!(
		::std::mem::align_of::<_FilterContext>(),
		8usize,
		concat!("Alignment of ", stringify!(_FilterContext))
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<_FilterContext>())).contextSize as *const _ as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(_FilterContext),
			"::",
			stringify!(contextSize)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<_FilterContext>())).revision as *const _ as usize },
		4usize,
		concat!(
			"Offset of field: ",
			stringify!(_FilterContext),
			"::",
			stringify!(revision)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<_FilterContext>())).serverContext as *const _ as usize },
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(_FilterContext),
			"::",
			stringify!(serverContext)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<_FilterContext>())).serverReserved as *const _ as usize },
		16usize,
		concat!(
			"Offset of field: ",
			stringify!(_FilterContext),
			"::",
			stringify!(serverReserved)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<_FilterContext>())).securePort as *const _ as usize },
		20usize,
		concat!(
			"Offset of field: ",
			stringify!(_FilterContext),
			"::",
			stringify!(securePort)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<_FilterContext>())).privateContext as *const _ as usize },
		24usize,
		concat!(
			"Offset of field: ",
			stringify!(_FilterContext),
			"::",
			stringify!(privateContext)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<_FilterContext>())).GetRequest as *const _ as usize },
		32usize,
		concat!(
			"Offset of field: ",
			stringify!(_FilterContext),
			"::",
			stringify!(GetRequest)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<_FilterContext>())).GetRequestContents as *const _ as usize
		},
		40usize,
		concat!(
			"Offset of field: ",
			stringify!(_FilterContext),
			"::",
			stringify!(GetRequestContents)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<_FilterContext>())).GetServerVariable as *const _ as usize
		},
		48usize,
		concat!(
			"Offset of field: ",
			stringify!(_FilterContext),
			"::",
			stringify!(GetServerVariable)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<_FilterContext>())).WriteClient as *const _ as usize },
		56usize,
		concat!(
			"Offset of field: ",
			stringify!(_FilterContext),
			"::",
			stringify!(WriteClient)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<_FilterContext>())).AllocMem as *const _ as usize },
		64usize,
		concat!(
			"Offset of field: ",
			stringify!(_FilterContext),
			"::",
			stringify!(AllocMem)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<_FilterContext>())).ServerSupport as *const _ as usize },
		72usize,
		concat!(
			"Offset of field: ",
			stringify!(_FilterContext),
			"::",
			stringify!(ServerSupport)
		)
	);
}
pub type FilterContext = _FilterContext;
pub const RequestMethod_kRequestNone: RequestMethod = 0;
pub const RequestMethod_kRequestHEAD: RequestMethod = 1;
pub const RequestMethod_kRequestGET: RequestMethod = 2;
pub const RequestMethod_kRequestPOST: RequestMethod = 3;
pub const RequestMethod_kRequestPUT: RequestMethod = 4;
pub const RequestMethod_kRequestDELETE: RequestMethod = 5;
pub const RequestMethod_kRequestTRACE: RequestMethod = 6;
pub const RequestMethod_kRequestCONNECT: RequestMethod = 7;
pub const RequestMethod_kRequestOPTIONS: RequestMethod = 8;
pub const RequestMethod_kRequestUNKNOWN: RequestMethod = 9;
pub const RequestMethod_kRequestBAD: RequestMethod = 10;
pub type RequestMethod = ::std::os::raw::c_uint;
pub const ServerSupportTypes_kWriteResponseHeaders: ServerSupportTypes = 1;
pub const ServerSupportTypes_kOwnsRequest: ServerSupportTypes = 2;
pub const ServerSupportTypes_kGetParsedRequest: ServerSupportTypes = 3;
pub const ServerSupportTypes_kWrite102Processing: ServerSupportTypes = 4;
pub const ServerSupportTypes_kGetAuthenticatedUserInfo: ServerSupportTypes = 5;
pub type ServerSupportTypes = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FilterResponseHeaders {
	pub responseCode: ::std::os::raw::c_uint,
	pub reasonText: *mut ::std::os::raw::c_char,
	pub headerText: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_FilterResponseHeaders() {
	assert_eq!(
		::std::mem::size_of::<FilterResponseHeaders>(),
		24usize,
		concat!("Size of: ", stringify!(FilterResponseHeaders))
	);
	assert_eq!(
		::std::mem::align_of::<FilterResponseHeaders>(),
		8usize,
		concat!("Alignment of ", stringify!(FilterResponseHeaders))
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterResponseHeaders>())).responseCode as *const _ as usize
		},
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterResponseHeaders),
			"::",
			stringify!(responseCode)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterResponseHeaders>())).reasonText as *const _ as usize
		},
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterResponseHeaders),
			"::",
			stringify!(reasonText)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterResponseHeaders>())).headerText as *const _ as usize
		},
		16usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterResponseHeaders),
			"::",
			stringify!(headerText)
		)
	);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FilterParsedRequestLine {
	pub pRawUri: *mut ::std::os::raw::c_char,
	pub pPathUri: *mut ::std::os::raw::c_char,
	pub pQueryUri: *mut ::std::os::raw::c_char,
	pub pFragmentUri: *mut ::std::os::raw::c_char,
	pub pSchemeUri: *mut ::std::os::raw::c_char,
	pub pHostInfoUri: *mut ::std::os::raw::c_char,
	pub pHostName: *mut ::std::os::raw::c_char,
	pub hostPort: ::std::os::raw::c_int,
	pub pUserUri: *mut ::std::os::raw::c_char,
	pub pUserPasswordUri: *mut ::std::os::raw::c_char,
	pub majorProtocolVersion: ::std::os::raw::c_int,
	pub minorProtocolVersion: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FilterParsedRequestLine() {
	assert_eq!(
		::std::mem::size_of::<FilterParsedRequestLine>(),
		88usize,
		concat!("Size of: ", stringify!(FilterParsedRequestLine))
	);
	assert_eq!(
		::std::mem::align_of::<FilterParsedRequestLine>(),
		8usize,
		concat!("Alignment of ", stringify!(FilterParsedRequestLine))
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterParsedRequestLine>())).pRawUri as *const _ as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterParsedRequestLine),
			"::",
			stringify!(pRawUri)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterParsedRequestLine>())).pPathUri as *const _ as usize
		},
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterParsedRequestLine),
			"::",
			stringify!(pPathUri)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterParsedRequestLine>())).pQueryUri as *const _ as usize
		},
		16usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterParsedRequestLine),
			"::",
			stringify!(pQueryUri)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterParsedRequestLine>())).pFragmentUri as *const _ as usize
		},
		24usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterParsedRequestLine),
			"::",
			stringify!(pFragmentUri)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterParsedRequestLine>())).pSchemeUri as *const _ as usize
		},
		32usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterParsedRequestLine),
			"::",
			stringify!(pSchemeUri)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterParsedRequestLine>())).pHostInfoUri as *const _ as usize
		},
		40usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterParsedRequestLine),
			"::",
			stringify!(pHostInfoUri)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterParsedRequestLine>())).pHostName as *const _ as usize
		},
		48usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterParsedRequestLine),
			"::",
			stringify!(pHostName)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterParsedRequestLine>())).hostPort as *const _ as usize
		},
		56usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterParsedRequestLine),
			"::",
			stringify!(hostPort)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterParsedRequestLine>())).pUserUri as *const _ as usize
		},
		64usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterParsedRequestLine),
			"::",
			stringify!(pUserUri)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterParsedRequestLine>())).pUserPasswordUri as *const _
				as usize
		},
		72usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterParsedRequestLine),
			"::",
			stringify!(pUserPasswordUri)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterParsedRequestLine>())).majorProtocolVersion as *const _
				as usize
		},
		80usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterParsedRequestLine),
			"::",
			stringify!(majorProtocolVersion)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterParsedRequestLine>())).minorProtocolVersion as *const _
				as usize
		},
		84usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterParsedRequestLine),
			"::",
			stringify!(minorProtocolVersion)
		)
	);
}
pub const FilterAuthenticatedUserFields_kCannonicalUserName: FilterAuthenticatedUserFields = 1;
pub const FilterAuthenticatedUserFields_kWebUserName: FilterAuthenticatedUserFields = 2;
pub const FilterAuthenticatedUserFields_kUserPassword: FilterAuthenticatedUserFields = 4;
pub const FilterAuthenticatedUserFields_kUserGroupList: FilterAuthenticatedUserFields = 8;
pub type FilterAuthenticatedUserFields = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FilterAuthenticatedUser {
	pub fieldFlags: FilterAuthenticatedUserFields,
	pub pUserCannonicalName: *mut ::std::os::raw::c_char,
	pub pWebUserName: *mut ::std::os::raw::c_char,
	pub pUserPassword: *mut ::std::os::raw::c_char,
	pub pUserGroupList: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_FilterAuthenticatedUser() {
	assert_eq!(
		::std::mem::size_of::<FilterAuthenticatedUser>(),
		40usize,
		concat!("Size of: ", stringify!(FilterAuthenticatedUser))
	);
	assert_eq!(
		::std::mem::align_of::<FilterAuthenticatedUser>(),
		8usize,
		concat!("Alignment of ", stringify!(FilterAuthenticatedUser))
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterAuthenticatedUser>())).fieldFlags as *const _ as usize
		},
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterAuthenticatedUser),
			"::",
			stringify!(fieldFlags)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterAuthenticatedUser>())).pUserCannonicalName as *const _
				as usize
		},
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterAuthenticatedUser),
			"::",
			stringify!(pUserCannonicalName)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterAuthenticatedUser>())).pWebUserName as *const _ as usize
		},
		16usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterAuthenticatedUser),
			"::",
			stringify!(pWebUserName)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterAuthenticatedUser>())).pUserPassword as *const _ as usize
		},
		24usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterAuthenticatedUser),
			"::",
			stringify!(pUserPassword)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterAuthenticatedUser>())).pUserGroupList as *const _ as usize
		},
		32usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterAuthenticatedUser),
			"::",
			stringify!(pUserGroupList)
		)
	);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FilterRawRequest {
	pub requestMethod: ::std::os::raw::c_uint,
	pub GetAllHeaders: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut FilterContext,
			ppHeaders: *mut *mut ::std::os::raw::c_char,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub GetHeader: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut FilterContext,
			pName: *mut ::std::os::raw::c_char,
			pBuffer: *mut ::std::os::raw::c_char,
			bufferSize: ::std::os::raw::c_uint,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub SetHeader: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut FilterContext,
			pName: *mut ::std::os::raw::c_char,
			pValue: *mut ::std::os::raw::c_char,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub AddHeader: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut FilterContext,
			pHheader: *mut ::std::os::raw::c_char,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub reserved: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_FilterRawRequest() {
	assert_eq!(
		::std::mem::size_of::<FilterRawRequest>(),
		48usize,
		concat!("Size of: ", stringify!(FilterRawRequest))
	);
	assert_eq!(
		::std::mem::align_of::<FilterRawRequest>(),
		8usize,
		concat!("Alignment of ", stringify!(FilterRawRequest))
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterRawRequest>())).requestMethod as *const _ as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterRawRequest),
			"::",
			stringify!(requestMethod)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterRawRequest>())).GetAllHeaders as *const _ as usize },
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterRawRequest),
			"::",
			stringify!(GetAllHeaders)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterRawRequest>())).GetHeader as *const _ as usize },
		16usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterRawRequest),
			"::",
			stringify!(GetHeader)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterRawRequest>())).SetHeader as *const _ as usize },
		24usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterRawRequest),
			"::",
			stringify!(SetHeader)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterRawRequest>())).AddHeader as *const _ as usize },
		32usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterRawRequest),
			"::",
			stringify!(AddHeader)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterRawRequest>())).reserved as *const _ as usize },
		40usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterRawRequest),
			"::",
			stringify!(reserved)
		)
	);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FilterParsedRequest {
	pub requestMethod: ::std::os::raw::c_uint,
	pub GetAllHeaders: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut FilterContext,
			ppHeaders: *mut *mut ::std::os::raw::c_char,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub GetHeader: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut FilterContext,
			pName: *mut ::std::os::raw::c_char,
			pBuffer: *mut ::std::os::raw::c_char,
			bufferSize: ::std::os::raw::c_uint,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub reserved: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_FilterParsedRequest() {
	assert_eq!(
		::std::mem::size_of::<FilterParsedRequest>(),
		32usize,
		concat!("Size of: ", stringify!(FilterParsedRequest))
	);
	assert_eq!(
		::std::mem::align_of::<FilterParsedRequest>(),
		8usize,
		concat!("Alignment of ", stringify!(FilterParsedRequest))
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterParsedRequest>())).requestMethod as *const _ as usize
		},
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterParsedRequest),
			"::",
			stringify!(requestMethod)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterParsedRequest>())).GetAllHeaders as *const _ as usize
		},
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterParsedRequest),
			"::",
			stringify!(GetAllHeaders)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterParsedRequest>())).GetHeader as *const _ as usize },
		16usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterParsedRequest),
			"::",
			stringify!(GetHeader)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterParsedRequest>())).reserved as *const _ as usize },
		24usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterParsedRequest),
			"::",
			stringify!(reserved)
		)
	);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FilterMapURL {
	pub url: *const ::std::os::raw::c_char,
	pub pathBuffer: *mut ::std::os::raw::c_char,
	pub bufferSize: ::std::os::raw::c_uint,
	pub mapType: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_FilterMapURL() {
	assert_eq!(
		::std::mem::size_of::<FilterMapURL>(),
		24usize,
		concat!("Size of: ", stringify!(FilterMapURL))
	);
	assert_eq!(
		::std::mem::align_of::<FilterMapURL>(),
		8usize,
		concat!("Alignment of ", stringify!(FilterMapURL))
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterMapURL>())).url as *const _ as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterMapURL),
			"::",
			stringify!(url)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterMapURL>())).pathBuffer as *const _ as usize },
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterMapURL),
			"::",
			stringify!(pathBuffer)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterMapURL>())).bufferSize as *const _ as usize },
		16usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterMapURL),
			"::",
			stringify!(bufferSize)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterMapURL>())).mapType as *const _ as usize },
		20usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterMapURL),
			"::",
			stringify!(mapType)
		)
	);
}
pub const FilterURLMapTypes_kURLMapUnknown: FilterURLMapTypes = 0;
pub const FilterURLMapTypes_kURLMapPass: FilterURLMapTypes = 1;
pub const FilterURLMapTypes_kURLMapExec: FilterURLMapTypes = 2;
pub const FilterURLMapTypes_kURLMapRedirect: FilterURLMapTypes = 3;
pub const FilterURLMapTypes_kURLMapService: FilterURLMapTypes = 4;
pub const FilterURLMapTypes_kURLMapDomino: FilterURLMapTypes = 5;
pub type FilterURLMapTypes = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FilterAuthenticate {
	pub userName: *mut LMBCS,
	pub password: *mut LMBCS,
	pub clientCert: *mut ::std::os::raw::c_uchar,
	pub clientCertLen: ::std::os::raw::c_uint,
	pub authFlags: ::std::os::raw::c_uint,
	pub preAuthenticated: ::std::os::raw::c_uint,
	pub foundInCache: ::std::os::raw::c_uint,
	pub authNameSize: ::std::os::raw::c_uint,
	pub authName: *mut LMBCS,
	pub authType: ::std::os::raw::c_uint,
	pub GetUserNameList: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut FilterContext,
			pBuffer: *mut LMBCS,
			bufferSize: ::std::os::raw::c_uint,
			pNumNames: *mut ::std::os::raw::c_uint,
			reserved: ::std::os::raw::c_uint,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub GetHeader: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut FilterContext,
			pName: *mut ::std::os::raw::c_char,
			pBuffer: *mut ::std::os::raw::c_char,
			bufferSize: ::std::os::raw::c_uint,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub GetMappedResource: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut FilterContext,
			ppBuffer: *mut *mut ::std::os::raw::c_char,
			pErrID: *mut ::std::os::raw::c_uint,
		),
	>,
}
#[test]
fn bindgen_test_layout_FilterAuthenticate() {
	assert_eq!(
		::std::mem::size_of::<FilterAuthenticate>(),
		88usize,
		concat!("Size of: ", stringify!(FilterAuthenticate))
	);
	assert_eq!(
		::std::mem::align_of::<FilterAuthenticate>(),
		8usize,
		concat!("Alignment of ", stringify!(FilterAuthenticate))
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterAuthenticate>())).userName as *const _ as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterAuthenticate),
			"::",
			stringify!(userName)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterAuthenticate>())).password as *const _ as usize },
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterAuthenticate),
			"::",
			stringify!(password)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterAuthenticate>())).clientCert as *const _ as usize },
		16usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterAuthenticate),
			"::",
			stringify!(clientCert)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterAuthenticate>())).clientCertLen as *const _ as usize
		},
		24usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterAuthenticate),
			"::",
			stringify!(clientCertLen)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterAuthenticate>())).authFlags as *const _ as usize },
		28usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterAuthenticate),
			"::",
			stringify!(authFlags)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterAuthenticate>())).preAuthenticated as *const _ as usize
		},
		32usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterAuthenticate),
			"::",
			stringify!(preAuthenticated)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterAuthenticate>())).foundInCache as *const _ as usize },
		36usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterAuthenticate),
			"::",
			stringify!(foundInCache)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterAuthenticate>())).authNameSize as *const _ as usize },
		40usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterAuthenticate),
			"::",
			stringify!(authNameSize)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterAuthenticate>())).authName as *const _ as usize },
		48usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterAuthenticate),
			"::",
			stringify!(authName)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterAuthenticate>())).authType as *const _ as usize },
		56usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterAuthenticate),
			"::",
			stringify!(authType)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterAuthenticate>())).GetUserNameList as *const _ as usize
		},
		64usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterAuthenticate),
			"::",
			stringify!(GetUserNameList)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterAuthenticate>())).GetHeader as *const _ as usize },
		72usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterAuthenticate),
			"::",
			stringify!(GetHeader)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterAuthenticate>())).GetMappedResource as *const _ as usize
		},
		80usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterAuthenticate),
			"::",
			stringify!(GetMappedResource)
		)
	);
}
pub const FilterAuthenticationTypes_kNotAuthentic: FilterAuthenticationTypes = 0;
pub const FilterAuthenticationTypes_kAuthenticBasic: FilterAuthenticationTypes = 1;
pub const FilterAuthenticationTypes_kAuthenticClientCert: FilterAuthenticationTypes = 2;
pub type FilterAuthenticationTypes = ::std::os::raw::c_uint;
pub const FilterAuthConfigFlags_kAuthAllowBasic: FilterAuthConfigFlags = 1;
pub const FilterAuthConfigFlags_kAuthAllowAnonymous: FilterAuthConfigFlags = 2;
pub const FilterAuthConfigFlags_kAuthAllowSSLCert: FilterAuthConfigFlags = 4;
pub const FilterAuthConfigFlags_kAuthAllowSSLBasic: FilterAuthConfigFlags = 8;
pub const FilterAuthConfigFlags_kAuthAllowSSLAnonymous: FilterAuthConfigFlags = 16;
pub const FilterAuthConfigFlags_kAuthRedirectToSSL: FilterAuthConfigFlags = 32;
pub type FilterAuthConfigFlags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FilterUserNameList {
	pub userName: *const LMBCS,
	pub GetUserNameList: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut FilterContext,
			pBuffer: *mut LMBCS,
			bufferSize: ::std::os::raw::c_uint,
			pNumNames: *mut ::std::os::raw::c_uint,
			reserved: ::std::os::raw::c_uint,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub PopulateUserNameList: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut FilterContext,
			pBuffer: *mut LMBCS,
			bufferSize: ::std::os::raw::c_uint,
			pNumNames: *mut ::std::os::raw::c_uint,
			reserved: ::std::os::raw::c_uint,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub AddGroupsToList: ::std::option::Option<
		unsafe extern "C" fn(
			pCcontext: *mut FilterContext,
			pGroupNames: *mut LMBCS,
			numGroupNames: ::std::os::raw::c_uint,
			reserved: ::std::os::raw::c_uint,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub RemoveGroupsFromList: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut FilterContext,
			reserved: ::std::os::raw::c_uint,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub reserved: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_FilterUserNameList() {
	assert_eq!(
		::std::mem::size_of::<FilterUserNameList>(),
		48usize,
		concat!("Size of: ", stringify!(FilterUserNameList))
	);
	assert_eq!(
		::std::mem::align_of::<FilterUserNameList>(),
		8usize,
		concat!("Alignment of ", stringify!(FilterUserNameList))
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterUserNameList>())).userName as *const _ as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterUserNameList),
			"::",
			stringify!(userName)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterUserNameList>())).GetUserNameList as *const _ as usize
		},
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterUserNameList),
			"::",
			stringify!(GetUserNameList)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterUserNameList>())).PopulateUserNameList as *const _ as usize
		},
		16usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterUserNameList),
			"::",
			stringify!(PopulateUserNameList)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterUserNameList>())).AddGroupsToList as *const _ as usize
		},
		24usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterUserNameList),
			"::",
			stringify!(AddGroupsToList)
		)
	);
	assert_eq!(
		unsafe {
			&(*(::std::ptr::null::<FilterUserNameList>())).RemoveGroupsFromList as *const _ as usize
		},
		32usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterUserNameList),
			"::",
			stringify!(RemoveGroupsFromList)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterUserNameList>())).reserved as *const _ as usize },
		40usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterUserNameList),
			"::",
			stringify!(reserved)
		)
	);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FilterResponse {
	pub responseCode: ::std::os::raw::c_uint,
	pub reasonText: *mut ::std::os::raw::c_char,
	pub GetAllHeaders: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut FilterContext,
			ppHeaders: *mut *mut ::std::os::raw::c_char,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub GetHeader: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut FilterContext,
			pName: *mut ::std::os::raw::c_char,
			pBuffer: *mut ::std::os::raw::c_char,
			bufferSize: ::std::os::raw::c_uint,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub SetHeader: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut FilterContext,
			pName: *mut ::std::os::raw::c_char,
			pValue: *mut ::std::os::raw::c_char,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub AddHeader: ::std::option::Option<
		unsafe extern "C" fn(
			pContext: *mut FilterContext,
			pHeader: *mut ::std::os::raw::c_char,
			pErrID: *mut ::std::os::raw::c_uint,
		) -> ::std::os::raw::c_int,
	>,
	pub reserved: ::std::os::raw::c_uint,
	pub userName: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_FilterResponse() {
	assert_eq!(
		::std::mem::size_of::<FilterResponse>(),
		64usize,
		concat!("Size of: ", stringify!(FilterResponse))
	);
	assert_eq!(
		::std::mem::align_of::<FilterResponse>(),
		8usize,
		concat!("Alignment of ", stringify!(FilterResponse))
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterResponse>())).responseCode as *const _ as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterResponse),
			"::",
			stringify!(responseCode)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterResponse>())).reasonText as *const _ as usize },
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterResponse),
			"::",
			stringify!(reasonText)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterResponse>())).GetAllHeaders as *const _ as usize },
		16usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterResponse),
			"::",
			stringify!(GetAllHeaders)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterResponse>())).GetHeader as *const _ as usize },
		24usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterResponse),
			"::",
			stringify!(GetHeader)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterResponse>())).SetHeader as *const _ as usize },
		32usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterResponse),
			"::",
			stringify!(SetHeader)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterResponse>())).AddHeader as *const _ as usize },
		40usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterResponse),
			"::",
			stringify!(AddHeader)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterResponse>())).reserved as *const _ as usize },
		48usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterResponse),
			"::",
			stringify!(reserved)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterResponse>())).userName as *const _ as usize },
		56usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterResponse),
			"::",
			stringify!(userName)
		)
	);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FilterRawWrite {
	pub content: *mut ::std::os::raw::c_char,
	pub contentLen: ::std::os::raw::c_uint,
	pub reserved: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_FilterRawWrite() {
	assert_eq!(
		::std::mem::size_of::<FilterRawWrite>(),
		16usize,
		concat!("Size of: ", stringify!(FilterRawWrite))
	);
	assert_eq!(
		::std::mem::align_of::<FilterRawWrite>(),
		8usize,
		concat!("Alignment of ", stringify!(FilterRawWrite))
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterRawWrite>())).content as *const _ as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterRawWrite),
			"::",
			stringify!(content)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterRawWrite>())).contentLen as *const _ as usize },
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterRawWrite),
			"::",
			stringify!(contentLen)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<FilterRawWrite>())).reserved as *const _ as usize },
		12usize,
		concat!(
			"Offset of field: ",
			stringify!(FilterRawWrite),
			"::",
			stringify!(reserved)
		)
	);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FilterAuthorize {
	pub pURL: *const ::std::os::raw::c_char,
	pub pBuffer: *mut ::std::os::raw::c_char,
	pub bufferSize: ::std::os::raw::c_uint,
	pub mapType: ::std::os::raw::c_uint,
	pub isAuthorized: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__FilterAuthorize() {
	assert_eq!(
		::std::mem::size_of::<_FilterAuthorize>(),
		32usize,
		concat!("Size of: ", stringify!(_FilterAuthorize))
	);
	assert_eq!(
		::std::mem::align_of::<_FilterAuthorize>(),
		8usize,
		concat!("Alignment of ", stringify!(_FilterAuthorize))
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<_FilterAuthorize>())).pURL as *const _ as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(_FilterAuthorize),
			"::",
			stringify!(pURL)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<_FilterAuthorize>())).pBuffer as *const _ as usize },
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(_FilterAuthorize),
			"::",
			stringify!(pBuffer)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<_FilterAuthorize>())).bufferSize as *const _ as usize },
		16usize,
		concat!(
			"Offset of field: ",
			stringify!(_FilterAuthorize),
			"::",
			stringify!(bufferSize)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<_FilterAuthorize>())).mapType as *const _ as usize },
		20usize,
		concat!(
			"Offset of field: ",
			stringify!(_FilterAuthorize),
			"::",
			stringify!(mapType)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<_FilterAuthorize>())).isAuthorized as *const _ as usize },
		24usize,
		concat!(
			"Offset of field: ",
			stringify!(_FilterAuthorize),
			"::",
			stringify!(isAuthorized)
		)
	);
}
pub type FilterAuthorize = _FilterAuthorize;
extern "C" {
	pub fn OSGetEnvironmentString(
		VariableName: *const ::std::os::raw::c_char,
		retValueBuffer: *mut ::std::os::raw::c_char,
		BufferLength: WORD,
	) -> BOOL;
}
extern "C" {
	pub fn OSGetEnvironmentLong(
		VariableName: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_long;
}
extern "C" {
	pub fn OSSetEnvironmentVariable(
		VariableName: *const ::std::os::raw::c_char,
		Value: *const ::std::os::raw::c_char,
	);
}
extern "C" {
	pub fn OSSetEnvironmentInt(
		VariableName: *const ::std::os::raw::c_char,
		Value: ::std::os::raw::c_int,
	);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
	pub gp_offset: ::std::os::raw::c_uint,
	pub fp_offset: ::std::os::raw::c_uint,
	pub overflow_arg_area: *mut ::std::os::raw::c_void,
	pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
	assert_eq!(
		::std::mem::size_of::<__va_list_tag>(),
		24usize,
		concat!("Size of: ", stringify!(__va_list_tag))
	);
	assert_eq!(
		::std::mem::align_of::<__va_list_tag>(),
		8usize,
		concat!("Alignment of ", stringify!(__va_list_tag))
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(__va_list_tag),
			"::",
			stringify!(gp_offset)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
		4usize,
		concat!(
			"Offset of field: ",
			stringify!(__va_list_tag),
			"::",
			stringify!(fp_offset)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(__va_list_tag),
			"::",
			stringify!(overflow_arg_area)
		)
	);
	assert_eq!(
		unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
		16usize,
		concat!(
			"Offset of field: ",
			stringify!(__va_list_tag),
			"::",
			stringify!(reg_save_area)
		)
	);
}
